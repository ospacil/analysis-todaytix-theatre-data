---
title: "Test connection to BigQuery from R"
format:
  html:
    code-fold: show
    code-tools: true
---

## Setup

```{r}
#| output: FALSE
library(DBI)
library(bigrquery)
library(dplyr)
library(dbplyr)
library(lubridate)
library(tidyr)
library(ggplot2)

# Set my preferences for the ggplot theme
theme_set(theme_gray(base_size = 12)) + 
    theme_update(
        legend.position = "bottom",
        strip.background = element_blank(),
    )
```

## Connect to BigQuery and download the data

```{r}
# Configure the connection
# It turns out that this just works, which is great!
con <- dbConnect(
    bigrquery::bigquery(),
    project = "todaytix-theatre-data",
    dataset = "prod"
)
```

The dataset is pretty small still, so let's just download all rows and relevant columns to memory:

```{r}
# Make a connection to table in the database
dat_remote <- tbl(con, "stg_show_availability")
```

```{r}
dat <- dat_remote |>
    select(show_id, show_name, starting_date, closing_date, request_date, days_till_performance,
        performance_date, performance_type, available_seat_count, min_price) |>
    collect()

glimpse(dat)
```


## Data exploration - Christmas/New Year days 

```{r}
dat_distinct_performances <- dat |>
    select(show_id, show_name, performance_date, performance_type) |>
    distinct() |>
    arrange(show_id, performance_date) |>
    mutate(day_of_week = wday(performance_date, label=TRUE, week_start=1))
```

```{r}
dat_distinct_performances |>
    group_by(show_id, show_name, performance_type, day_of_week) |>
    summarise(num_of_shows = n()) |>
    pivot_wider(id_cols=c(show_id, show_name, day_of_week),
        names_from=performance_type,
        values_from=num_of_shows,
        values_fill=0L)
```

For both shows, there are a handful of matinee performance on odd days of the week -- the regular days appear to be Wednesdays and Saturdays for Oedipus, and Fridays and Saturdays for A Christmas Carol(ish). Let's explore the other days of the week:

```{r}
dat_odd_matinee <- dat_distinct_performances |>
    filter(performance_type == 'MATINEE',
           (show_id == '41707' & day_of_week %in% c('Mon','Tue','Fri')) | 
           (show_id == '42462' & day_of_week %in% c('Mon', 'Tue', 'Thu', 'Sun')))

dat_odd_matinee
```

So mostly days during the festive period, apart from an odd Thursday, 5th December for Christmas Carol(ish) -- maybe we can treat that one as normal after all.

```{r}
dat_distinct_performances <- dat_distinct_performances |>
    left_join(filter(dat_odd_matinee, !(day_of_week == 'Thu')) |> mutate(is_festive_performance = TRUE),
        by=c("show_id", "show_name", "performance_date", "performance_type", "day_of_week")) |>
    mutate(is_festive_performance = if_else(is.na(is_festive_performance), FALSE, is_festive_performance))

```




## How quickly do the tickets disappear?

```{r}
dat |>
    left_join(dat_distinct_performances, by=c("show_id", "show_name", "performance_date", "performance_type")) |>
    ggplot() +
    geom_point(aes(x=days_till_performance, y=available_seat_count, color=is_festive_performance)) +
    facet_wrap(~paste0(show_name, ' (', performance_type, ' performance)'), nrow=2) +
    scale_color_brewer(palette="Dark2")


```





```{r}
#| fig.height: 8
#| fig.width: 10

dat |>
    ggplot() +
    geom_point(aes(x = days_till_performance, y = available_seat_count, color = performance_type),
        alpha=0.6) +
    facet_wrap(~show_name, nrow=2, scales="free_y") +
    scale_x_continuous(breaks = seq(0, 80, 5)) +
    scale_color_brewer(palette="Dark2") +
    labs(x="Days to performance",
         y= "Number of seats available",
         color="Performance time",
         title="How does the number of available seats change as the performance date approaches?",
         subtitle="Each dot corresponds to a single (API query date, performance date) pair")

```

