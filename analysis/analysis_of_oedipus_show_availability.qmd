---
title: "Oedipus theatre show - Analysis of seat availability (Work in progress)"
author: Oldrich Spacil
date: last-modified
toc: true
format:
  html:
    code-fold: true
    code-summary: "Source code"
    code-tools: 
      source: true
      toggle: true
jupyter: python3
---

::: {.callout-tip}
## Source code
To view the full source code of the document, use the Code menu at the top right of this page.
:::

```{python}
#| echo: FALSE
import polars as pl
import pyarrow
from datetime import datetime, date
from google.cloud import bigquery
from great_tables import GT, html, md
import matplotlib.pyplot as plt
import seaborn as sns
import seaborn.objects as so
import plotly.express as px
import plotly.io as pio
pio.renderers.default = "plotly_mimetype+notebook_connected"
```

```{python}
#| echo: FALSE
#| warning: FALSE
client = bigquery.Client()

# Download all Oedipus show data
my_query = (
    'SELECT * '
      'FROM todaytix-theatre-data.prod.stg_show_availability '
     'WHERE show_name = "Oedipus" '
     'ORDER BY request_date, performance_date'
     )

query_job = client.query(my_query)  # API request
rows = query_job.result()  # Waits for query to finish

# Convert into a Polars dataframe
dat = pl.from_arrow(rows.to_arrow())
```

## Introduction

First, let's introduce the dataset. We are looking at daily information on seat availability for individual performances of the Oedipus theatre show. The show is shceduled for the following number of evening and matinee performances:

```{python}
# Get the very basic stats on the show...
dat_show_summary = dat.group_by(
    "show_name", "starting_date", "closing_date", "performance_type"
    ).agg(
        pl.col("performance_date").n_unique().alias("number_of_performances")
    )

# ... and display nicely
GT(dat_show_summary).tab_header(
        title="Show information summary"
    ).cols_label(
        show_name = "Show name",
        starting_date = "Opening date",
        closing_date = "Closing date",
        performance_type = "Performance time",
        number_of_performances = "Number of performances"
    ).fmt_date(
        columns=["starting_date", "closing_date"],
        date_style="day_m_year"
    ).data_color(
        columns=["performance_type"],
        palette=["lavender", "yellow"],
        domain=["EVENING", "MATINEE"]
    )
```

An individual performance is uniquely identified by its date and part of day (evening or matinee). For each performance, we have been collecting information on seat availability -- the information is collected daily since 18th October up intil the date of the performance. This means that for each individual performance we have a number of data points showing the change in seat availability over time.

Before we embark on visualizing the data in earnest, let's list all the individual performances, calculate how many data points we have on each, and how many seats were available for the performance **at the start of our data collection** (rather than at opening of the ticket sales!).

```{python}
# Calculate summary statistics fro each individual performance
# In particular I am in interested in the number of days I have data points for each performance, 
# and how this relates with the number of initially available seats
dat_performance_date_info_summary = dat.sort(
        "performance_timestamp", "request_timestamp"
    ).group_by(
        "performance_date",
        (pl.col("performance_date").dt.strftime("%a").alias("day_of_week")),
        "performance_type"
    ).agg(
        pl.col("available_seat_count").first().alias("initial_num_of_available_seats"),
        pl.col("available_seat_count").max().alias("max_num_of_available_seats"),
        pl.col("request_date").n_unique().alias("num_of_info_points"),
        pl.col("request_date").min().alias("first_info_on_availability"),
        pl.col("request_date").max().alias("last_info_on_availability")
    ).sort(
        "performance_date", "performance_type", descending=[False, True]
    )

# Display the summary stats in a nice table
GT(dat_performance_date_info_summary).tab_header(
        title="Summary of information on individual show performances",
        subtitle="For each individual performance, we obtain a daily data point on show availability for each day from 18th October up until the day of the performance. Since our data collection started after the opening sale of tickets, the earlier performances will have fewer data points. We also show the number of seats available initially at the start of data collection, and the maximum number of seats available during the data collection period."
    ).tab_spanner(
        label=md("**Performance date and time**"),
        columns=["performance_date", "day_of_week", "performance_type"]
    ).tab_spanner(
        label=md("**Summary of data points on the performance**"),
        columns=["num_of_info_points", "initial_num_of_available_seats", "max_num_of_available_seats", "first_info_on_availability", "last_info_on_availability"]
    ).fmt_date(
        columns=["performance_date", "first_info_on_availability", "last_info_on_availability"], date_style="day_m_year"
    ).data_color(
        columns=["performance_type"],
        palette=["lavender", "yellow"],
        domain=["EVENING", "MATINEE"]
    ).data_color(
        columns=["initial_num_of_available_seats", "max_num_of_available_seats"],
        palette="Greens",
        alpha=0.2,
        domain=[0, 480]
    ).cols_label(
        performance_date = "Date",
        day_of_week = "Day of week",
        performance_type = "Time",
        num_of_info_points = "Number of data points",
        initial_num_of_available_seats = "Initial number of seats available",
        max_num_of_available_seats = "Maximum number of seats available",
        first_info_on_availability = "Date of first data point",
        last_info_on_availability = "Date of last data point"
    ).cols_align(
        columns=["num_of_info_points", "initial_num_of_available_seats", "max_num_of_available_seats"],
        align="center"
    )
```

Even this crude table visualization uncovers a couple of curious observations:

1. **Matinee performances have lower initial seat availability than evening performances.** This might be because there are fewer matinee performances overall and the customers shopping for matinees might be different from the ones shopping for evening performances (e.g. due to commute time?), or perhaps because TodayTix do not get the full breadth of seats for matinee performances?
2. **Some performances later in the show run do not have the "full" number of data points.** We shall have a look in detail, but it appears that we might be missing some of the daily data points for these performances.

### Missing daily data points

Actually, I am pretty sure the missing dates are the dates on which there are 0 seats available for the performance! Indeed, there are no data points with 0 seat availability:

```{python}
GT(dat.group_by(
        no_seats_available = (pl.col("available_seat_count") == 0)
    ).agg(
        pl.len().alias("number_of_data_points")
    ))
```

Looking at data points for a single performance with missing dates, we can see that these dates are squeezed between the dates when seat availability was close to 0:

```{python}
dat_single_performance = dat.filter(
        pl.col("performance_date") == date(2024,11,29),
        pl.col("performance_type") == "EVENING"
    ).select(
        pl.col("request_date").dt.strftime("%Y-%m-%d").alias("request_date"),
        pl.col("available_seat_count")
    ).sort("request_date")


plt.figure()
so.Plot(
        dat_single_performance,
        x="available_seat_count",
        y="request_date",
        text="available_seat_count"
    ).add(
        so.Bar()
    ).add(
        so.Text(halign="left", fontsize=8, offset=1)
    ).label(
        x="Number of available seats",
        y="Date of the data point",
        title="Evolution of the number of available seats\n for the evening performance of 29th Nov 2024"
    ).layout(
        size=(7,7))
```

**Conlusion:** The "missing" data points correspond to no seat availability for the particular performance when queried for that information on the "missing" date. **For the purposes of further analysis and modelling, we shall fill in these missing data points with explicit 0 seat availability.**


```{python}
# Use Polars' upsample method to fill in the missing dates and data
# NOTE: It looks like I have a mistake in calculating days_till_performance in BigQuery!

dat_filled = dat.sort(
        "performance_date", "performance_type", "request_date"
    ).upsample(
        time_column="request_date", every="1d", group_by=["performance_date", "performance_type"]
    ).select(
        pl.col("request_date"),
        pl.col("performance_date").forward_fill(),
        pl.col("performance_type").forward_fill(),
        pl.col("available_seat_count").fill_null(0)
        # pl.col("days_till_performance") -- I have a mistake in BigQuery!
    ).with_columns(
        (pl.col("performance_date") - pl.col("request_date")).dt.total_days().alias("days_till_performance")
    )
```

## Some actual analysis

Dynamic visualization of the evolution of available seats...

```{python}
fig = px.scatter(
    dat,
    x = "days_till_performance",
    y = "available_seat_count",
    color="performance_type",
    animation_frame="request_date",
    animation_group="performance_date",
    range_x = [1, 80],
    range_y=[0, 480],
    opacity=0.7,
    color_discrete_sequence =["mediumpurple", "yellow"]
).update_traces(
    marker=dict(size=10, line=dict(width=1, color="black"))
).update_layout(
    xaxis=dict(title="Number of days till performance"),
    yaxis=dict(title="Number of seats available"),
    legend=dict(title=dict(text="Performance time"),
                xanchor="left", yanchor="top", x=0.01, y=0.99)
)

fig.show()

```